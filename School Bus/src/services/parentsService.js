// src/services/parentsService.js

import apiClient from './api.js';

const ENDPOINT = '/parents';

export const parentsService = {
    // Láº¥y táº¥t cáº£ phá»¥ huynh
    getAllParents: async () => {
        try {
            const response = await apiClient.get(ENDPOINT);
            console.log('ðŸ”µ Parents response from API:', response);
            return Array.isArray(response) ? response : [];  // response Ä‘Ã£ Ä‘Æ°á»£c interceptor chuáº©n hÃ³a
        } catch (error) {
            console.error('Error fetching parents:', error);
            throw error;
        }
    },

    // Láº¥y má»™t phá»¥ huynh theo ID
    getParentById: async (id) => {
        try {
            const response = await apiClient.get(`${ENDPOINT}/${id}`);
            return response || null;
        } catch (error) {
            console.error('Error fetching parent:', error);
            throw error;
        }
    },

    // Láº¥y danh sÃ¡ch con cá»§a phá»¥ huynh
    getParentChildren: async (id) => {
        try {
            console.log('ðŸ”µ Getting children for parent:', id);
            const response = await apiClient.get(`${ENDPOINT}/${id}/children`);
            console.log('âœ… Children response:', response);
            return Array.isArray(response) ? response : [];  // response Ä‘Ã£ Ä‘Æ°á»£c interceptor chuáº©n hÃ³a
        } catch (error) {
            console.error('Error fetching parent children:', error);
            throw error;
        }
    },

    // Táº¡o phá»¥ huynh má»›i
    createParent: async (parentData) => {
        try {
            console.log('ðŸ”µ Creating parent with data:', parentData);
            const response = await apiClient.post(ENDPOINT, parentData);
            return response || null;
        } catch (error) {
            console.error('Error creating parent:', error);
            throw error;
        }
    },

    // Cáº­p nháº­t phá»¥ huynh
    updateParent: async (id, parentData) => {
        try {
            console.log('ðŸ”µ Updating parent with data:', parentData);
            const response = await apiClient.put(`${ENDPOINT}/${id}`, parentData);
            return response || null;
        } catch (error) {
            console.error('Error updating parent:', error);
            throw error;
        }
    },

    // XÃ³a phá»¥ huynh
    deleteParent: async (id) => {
        try {
            const response = await apiClient.delete(`${ENDPOINT}/${id}`);
            return response || null;
        } catch (error) {
            console.error('Error deleting parent:', error);
            throw error;
        }
    },

    // Láº¥y danh sÃ¡ch tráº¡ng thÃ¡i
    getStatuses: () => {
        return [
            { value: 'active', label: 'Hoáº¡t Ä‘á»™ng', color: 'green' },
            { value: 'inactive', label: 'KhÃ´ng hoáº¡t Ä‘á»™ng', color: 'red' }
        ];
    },

    // Validate parent data
    validateParentData: (data) => {
        const errors = {};

        if (!data.name?.trim()) {
            errors.name = 'TÃªn phá»¥ huynh lÃ  báº¯t buá»™c';
        }

        if (!data.phone?.trim()) {
            errors.phone = 'Sá»‘ Ä‘iá»‡n thoáº¡i lÃ  báº¯t buá»™c';
        } else if (!/^[0-9]{10,11}$/.test(data.phone.replace(/\s/g, ''))) {
            errors.phone = 'Sá»‘ Ä‘iá»‡n thoáº¡i khÃ´ng há»£p lá»‡ (10-11 sá»‘)';
        }

        if (data.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(data.email)) {
            errors.email = 'Email khÃ´ng há»£p lá»‡';
        }

        return {
            isValid: Object.keys(errors).length === 0,
            errors
        };
    }
};

export default parentsService;