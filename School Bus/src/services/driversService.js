// src/services/driversService.js

import apiClient from './api.js';

const ENDPOINT = '/drivers';

export const driversService = {
    // Láº¥y táº¥t cáº£ tÃ i xáº¿
    getAllDrivers: async () => {
        try {
            const response = await apiClient.get(ENDPOINT);
            console.log('ðŸ”µ Drivers response from API:', response);
            return Array.isArray(response) ? response : [];  // response Ä‘Ã£ Ä‘Æ°á»£c interceptor chuáº©n hÃ³a
        } catch (error) {
            console.error('Error fetching drivers:', error);
            throw error;
        }
    },

    // Láº¥y má»™t tÃ i xáº¿ theo ID
    getDriverById: async (id) => {
        try {
            const response = await apiClient.get(`${ENDPOINT}/${id}`);
            return response || null;
        } catch (error) {
            console.error('Error fetching driver:', error);
            throw error;
        }
    },

    // Láº¥y thÃ´ng tin chi tiáº¿t Ä‘áº§y Ä‘á»§ cá»§a tÃ i xáº¿
    getDriverDetails: async (id) => {
        try {
            const response = await apiClient.get(`${ENDPOINT}/${id}/details`);
            return response || null;
        } catch (error) {
            console.error('Error fetching driver details:', error);
            throw error;
        }
    },

    // Táº¡o tÃ i xáº¿ má»›i
    createDriver: async (driverData) => {
        try {
            const response = await apiClient.post(ENDPOINT, driverData);
            return response || null;
        } catch (error) {
            console.error('Error creating driver:', error);
            throw error;
        }
    },

    // Cáº­p nháº­t tÃ i xáº¿
    updateDriver: async (id, driverData) => {
        try {
            const response = await apiClient.put(`${ENDPOINT}/${id}`, driverData);
            return response || null;
        } catch (error) {
            console.error('Error updating driver:', error);
            throw error;
        }
    },

    // XÃ³a tÃ i xáº¿
    deleteDriver: async (id) => {
        try {
            const response = await apiClient.delete(`${ENDPOINT}/${id}`);
            return response || null;
        } catch (error) {
            console.error('Error deleting driver:', error);
            throw error;
        }
    },

    // Láº¥y danh sÃ¡ch tráº¡ng thÃ¡i
    getStatuses: () => {
        return [
            { value: 'active', label: 'Hoáº¡t Ä‘á»™ng', color: 'green' },
            { value: 'inactive', label: 'Táº¡m nghá»‰', color: 'red' },
            { value: 'suspended', label: 'Bá»‹ Ä‘Ã¬nh chá»‰', color: 'orange' }
        ];
    },

    // Validate driver data
    validateDriverData: (data) => {
        const errors = {};

        if (!data.name?.trim()) {
            errors.name = 'TÃªn tÃ i xáº¿ lÃ  báº¯t buá»™c';
        }

        if (!data.phone?.trim()) {
            errors.phone = 'Sá»‘ Ä‘iá»‡n thoáº¡i lÃ  báº¯t buá»™c';
        } else if (!/^[0-9]{10,11}$/.test(data.phone.replace(/\s/g, ''))) {
            errors.phone = 'Sá»‘ Ä‘iá»‡n thoáº¡i khÃ´ng há»£p lá»‡ (10-11 sá»‘)';
        }

        if (!data.license_number?.trim()) {
            errors.license_number = 'Sá»‘ báº±ng lÃ¡i lÃ  báº¯t buá»™c';
        }

        return {
            isValid: Object.keys(errors).length === 0,
            errors
        };
    }
};

export default driversService;