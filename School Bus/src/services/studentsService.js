// src/services/studentsService.js

import apiClient from './api.js';

const ENDPOINT = '/students';

export const studentsService = {
    // L·∫•y t·∫•t c·∫£ h·ªçc sinh
    getAllStudents: async () => {
        try {
            console.log('üîµ Calling GET /students...');
            const response = await apiClient.get(ENDPOINT);
            console.log('‚úÖ Response from interceptor:', response);
            // Interceptor ƒë√£ x·ª≠ l√Ω v√† tr·∫£ v·ªÅ data tr·ª±c ti·∫øp
            return Array.isArray(response) ? response : [];
        } catch (error) {
            console.error('‚ùå Error fetching students:', error);
            throw error;
        }
    },

    // L·∫•y m·ªôt h·ªçc sinh theo ID
    getStudentById: async (id) => {
        try {
            const response = await apiClient.get(`${ENDPOINT}/${id}`);
            return response; // Response ƒë√£ ƒë∆∞·ª£c interceptor x·ª≠ l√Ω
        } catch (error) {
            console.error('Error fetching student:', error);
            throw error;
        }
    },

    // T·∫°o h·ªçc sinh m·ªõi
    createStudent: async (studentData) => {
        try {
            const response = await apiClient.post(ENDPOINT, studentData);
            return response; // Response ƒë√£ ƒë∆∞·ª£c interceptor x·ª≠ l√Ω
        } catch (error) {
            console.error('Error creating student:', error);
            throw error;
        }
    },

    // C·∫≠p nh·∫≠t h·ªçc sinh
    updateStudent: async (id, studentData) => {
        try {
            const response = await apiClient.put(`${ENDPOINT}/${id}`, studentData);
            return response; // Response ƒë√£ ƒë∆∞·ª£c interceptor x·ª≠ l√Ω
        } catch (error) {
            console.error('Error updating student:', error);
            throw error;
        }
    },

    // X√≥a h·ªçc sinh
    deleteStudent: async (id) => {
        try {
            const response = await apiClient.delete(`${ENDPOINT}/${id}`);
            return response; // Response ƒë√£ ƒë∆∞·ª£c interceptor x·ª≠ l√Ω
        } catch (error) {
            console.error('Error deleting student:', error);
            throw error;
        }
    },

    // L·∫•y danh s√°ch l·ªõp h·ªçc (grades)
    getGrades: () => {
        return [
            { value: '1', label: 'L·ªõp 1' },
            { value: '2', label: 'L·ªõp 2' },
            { value: '3', label: 'L·ªõp 3' },
            { value: '4', label: 'L·ªõp 4' },
            { value: '5', label: 'L·ªõp 5' },
            { value: '6', label: 'L·ªõp 6' },
            { value: '7', label: 'L·ªõp 7' },
            { value: '8', label: 'L·ªõp 8' },
            { value: '9', label: 'L·ªõp 9' },
            { value: '10', label: 'L·ªõp 10' },
            { value: '11', label: 'L·ªõp 11' },
            { value: '12', label: 'L·ªõp 12' }
        ];
    },

    // Validate student data
    validateStudentData: (data) => {
        const errors = {};

        if (!data.name?.trim()) {
            errors.name = 'T√™n h·ªçc sinh l√† b·∫Øt bu·ªôc';
        }

        if (!data.grade) {
            errors.grade = 'L·ªõp h·ªçc l√† b·∫Øt bu·ªôc';
        }

        if (!data.school?.trim()) {
            errors.school = 'Tr∆∞·ªùng h·ªçc l√† b·∫Øt bu·ªôc';
        }

        if (!data.address?.trim()) {
            errors.address = 'ƒê·ªãa ch·ªâ l√† b·∫Øt bu·ªôc';
        }

        if (!data.parent_id) {
            errors.parent_id = 'Ph·ª• huynh l√† b·∫Øt bu·ªôc';
        }

        return {
            isValid: Object.keys(errors).length === 0,
            errors
        };
    }
};

export default studentsService;