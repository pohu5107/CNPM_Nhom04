import { useState, useEffect } from 'react';
import { MapContainer, TileLayer, Marker, Popup, Polyline } from 'react-leaflet';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import { routesService } from '../../services/routesService';
import { schedulesService } from '../../services/schedulesService';


// FIX l·ªói icon m·∫∑c ƒë·ªãnh kh√¥ng hi·ªán
import iconUrl from 'leaflet/dist/images/marker-icon.png';
import iconShadow from 'leaflet/dist/images/marker-shadow.png';
const DefaultIcon = L.icon({ iconUrl, shadowUrl: iconShadow, iconAnchor: [12, 41] });
L.Marker.prototype.options.icon = DefaultIcon;

// Icon cho c√°c ƒëi·ªÉm d·ª´ng
const stopIcon = new L.Icon({
  iconUrl: 'https://cdn-icons-png.flaticon.com/512/684/684908.png', // Bus stop icon
  iconSize: [35, 35],
  iconAnchor: [17, 35],
  popupAnchor: [0, -35],
});

export default function DriverMapView({ routeId, scheduleId, driverId }) {
  const [routeData, setRouteData] = useState(null);
  const [stops, setStops] = useState([]);
  const [routeLine, setRouteLine] = useState([]);
  const [mapCenter, setMapCenter] = useState([10.776, 106.700]); // Default HCM
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [resolvedRouteId, setResolvedRouteId] = useState(routeId || null);

  useEffect(() => {
    const fetchRouteData = async (rid) => {
      try {
        setLoading(true);
        setError(null);
        
        // ƒê√¢y l√† n∆°i g·ªçi API backend ƒë·ªÉ l·∫•y d·ªØ li·ªáu l·ªô tr√¨nh
        console.log('üó∫Ô∏è Fetching route details for routeId:', rid);
        const response = await routesService.getRouteById(rid);
        const data = response;
        console.log('üó∫Ô∏è Route details response:', data);

        setRouteData(data);
        setStops(data.stops || []);

        // Gi·∫£ s·ª≠ API tr·∫£ v·ªÅ m·ªôt m·∫£ng c√°c t·ªça ƒë·ªô cho Polyline
        // V√≠ d·ª•: data.route_geometry = [[10.77, 106.70], [10.78, 106.71], ...]
        if (data.route_geometry && data.route_geometry.length > 0) {
          setRouteLine(data.route_geometry);
          // C·∫≠p nh·∫≠t t√¢m b·∫£n ƒë·ªì d·ª±a tr√™n ƒëi·ªÉm ƒë·∫ßu ti√™n c·ªßa l·ªô tr√¨nh
          setMapCenter(data.route_geometry[0]);
        } else if (data.stops && data.stops.length > 0) {
          // N·∫øu kh√¥ng c√≥ l·ªô tr√¨nh, l·∫•y t√¢m l√† ƒëi·ªÉm d·ª´ng ƒë·∫ßu ti√™n
          const firstStopCoords = [data.stops[0].latitude, data.stops[0].longitude];
          setMapCenter(firstStopCoords);
        }

      } catch (err) {
        console.error(`Error fetching route details for routeId: ${routeId}`, err);
        setError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu l·ªô tr√¨nh.');
      } finally {
        setLoading(false);
      }
    };

    const fetchFromScheduleIfNeeded = async () => {
      try {
        // N·∫øu c√≥ s·∫µn routeId th√¨ d√πng lu√¥n
        if (routeId) {
          setResolvedRouteId(routeId);
          await fetchRouteData(routeId);
          return;
        }

        // N·∫øu kh√¥ng c√≥ routeId, nh∆∞ng c√≥ scheduleId + driverId
        if (scheduleId && driverId) {
          console.log('üß≠ No routeId. Fetching stops from schedule:', { scheduleId, driverId });
          setLoading(true);
          const resp = await schedulesService.getScheduleStops(driverId, scheduleId);
          console.log('üß≠ Schedule stops response:', resp);

          const stopsArr = Array.isArray(resp?.stops) ? resp.stops : [];
          setStops(stopsArr);

          if (stopsArr.length > 0) {
            const first = stopsArr[0];
            if (first?.latitude && first?.longitude) {
              setMapCenter([first.latitude, first.longitude]);
            }
          }

          // N·∫øu API tr·∫£ v·ªÅ routeId, th·ª≠ l·∫•y l·ªô tr√¨nh ƒë·ªÉ v·∫Ω polyline
          if (resp?.routeId) {
            setResolvedRouteId(resp.routeId);
            await fetchRouteData(resp.routeId);
          } else {
            setResolvedRouteId(null);
          }
        } else {
          // Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ fetch
          setLoading(false);
        }
      } catch (e) {
        console.error('Error deriving route from schedule:', e);
        setError('Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu l·ªô tr√¨nh t·ª´ l·ªãch tr√¨nh.');
        setLoading(false);
      }
    };

    fetchFromScheduleIfNeeded();
    // dependencies include incoming identifiers
  }, [routeId, scheduleId, driverId]);

  if (loading) {
    return <div className="flex items-center justify-center h-full bg-gray-100"><p>ƒêang t·∫£i b·∫£n ƒë·ªì...</p></div>;
  }

  if (error) {
    return <div className="flex items-center justify-center h-full bg-red-50 text-red-600"><p>{error}</p></div>;
  }

  // Kh√¥ng tr·∫£ v·ªÅ s·ªõm n·ªØa; ch√∫ng ta c√≥ th·ªÉ hi·ªÉn th·ªã c√°c ƒëi·ªÉm d·ª´ng t·ª´ schedule n·∫øu c√≥

  // Hi·ªÉn th·ªã m·ªôt l·ªõp debug m·ªèng khi kh√¥ng c√≥ d·ªØ li·ªáu h√¨nh h·ªçc c≈©ng kh√¥ng c√≥ ƒëi·ªÉm d·ª´ng
  const hasGeometry = Array.isArray(routeLine) && routeLine.length > 0;
  const hasStops = Array.isArray(stops) && stops.length > 0;

  return (
    <MapContainer center={mapCenter} zoom={14} style={{ height: '100%', width: '100%' }}>
      <TileLayer
        attribution='&copy; OpenStreetMap'
        url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
      />

      {/* V·∫Ω ƒë∆∞·ªùng ƒëi c·ªßa tuy·∫øn */}
      {routeLine.length > 0 && (
        <Polyline positions={routeLine} color="blue" weight={5} />
      )}

      {/* ƒê√°nh d·∫•u c√°c ƒëi·ªÉm d·ª´ng */}
      {stops.map((stop, index) => (
        <Marker
          key={stop.id || index}
          position={[stop.latitude, stop.longitude]}
          icon={stopIcon}
        >
          <Popup>
            <b>ƒêi·ªÉm d·ª´ng {index + 1}: {stop.name}</b>
            <br />
            ƒê·ªãa ch·ªâ: {stop.address}
            <br />
            Th·ªùi gian d·ª± ki·∫øn: {stop.arrival_time}
          </Popup>
        </Marker>
      ))}

      {(!hasGeometry && !hasStops) && (
        <div
          style={{ position: 'absolute', top: 12, right: 12, zIndex: 1000 }}
          className="bg-white/90 border border-gray-200 rounded-md px-3 py-2 text-sm text-gray-700 shadow"
        >
          Kh√¥ng c√≥ d·ªØ li·ªáu l·ªô tr√¨nh. routeId: <b>{String(resolvedRouteId)}</b>
        </div>
      )}
    </MapContainer>
  );
}
